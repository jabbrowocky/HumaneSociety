#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HumaneSociety
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Humane Society")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAge(Age instance);
    partial void UpdateAge(Age instance);
    partial void DeleteAge(Age instance);
    partial void InsertAnimal(Animal instance);
    partial void UpdateAnimal(Animal instance);
    partial void DeleteAnimal(Animal instance);
    partial void InsertAnimal_Type(Animal_Type instance);
    partial void UpdateAnimal_Type(Animal_Type instance);
    partial void DeleteAnimal_Type(Animal_Type instance);
    partial void InsertFood_Amount(Food_Amount instance);
    partial void UpdateFood_Amount(Food_Amount instance);
    partial void DeleteFood_Amount(Food_Amount instance);
    partial void InsertRoom_Number(Room_Number instance);
    partial void UpdateRoom_Number(Room_Number instance);
    partial void DeleteRoom_Number(Room_Number instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::HumaneSociety.Properties.Settings.Default.Humane_SocietyConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Age> Ages
		{
			get
			{
				return this.GetTable<Age>();
			}
		}
		
		public System.Data.Linq.Table<Animal> Animals
		{
			get
			{
				return this.GetTable<Animal>();
			}
		}
		
		public System.Data.Linq.Table<Animal_Type> Animal_Types
		{
			get
			{
				return this.GetTable<Animal_Type>();
			}
		}
		
		public System.Data.Linq.Table<Food_Amount> Food_Amounts
		{
			get
			{
				return this.GetTable<Food_Amount>();
			}
		}
		
		public System.Data.Linq.Table<Room_Number> Room_Numbers
		{
			get
			{
				return this.GetTable<Room_Number>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Age")]
	public partial class Age : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<double> _Age_in_Years;
		
		private EntitySet<Animal> _Animals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAge_in_YearsChanging(System.Nullable<double> value);
    partial void OnAge_in_YearsChanged();
    #endregion
		
		public Age()
		{
			this._Animals = new EntitySet<Animal>(new Action<Animal>(this.attach_Animals), new Action<Animal>(this.detach_Animals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age_in_Years", DbType="Float")]
		public System.Nullable<double> Age_in_Years
		{
			get
			{
				return this._Age_in_Years;
			}
			set
			{
				if ((this._Age_in_Years != value))
				{
					this.OnAge_in_YearsChanging(value);
					this.SendPropertyChanging();
					this._Age_in_Years = value;
					this.SendPropertyChanged("Age_in_Years");
					this.OnAge_in_YearsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Age_Animal", Storage="_Animals", ThisKey="ID", OtherKey="Age")]
		public EntitySet<Animal> Animals
		{
			get
			{
				return this._Animals;
			}
			set
			{
				this._Animals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Age1 = this;
		}
		
		private void detach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Age1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Animals")]
	public partial class Animal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Pet_Name;
		
		private System.Nullable<int> _Animal_Type;
		
		private System.Nullable<int> _Age;
		
		private System.Nullable<double> _Cost;
		
		private System.Nullable<int> _Room_Number;
		
		private System.Nullable<bool> _Adoption_Status;
		
		private System.Nullable<bool> _Shot_Status;
		
		private System.Nullable<int> _Food_Consumption;
		
		private EntityRef<Age> _Age1;
		
		private EntityRef<Animal_Type> _Animal_Type1;
		
		private EntityRef<Food_Amount> _Food_Amount;
		
		private EntityRef<Room_Number> _Room_Number1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPet_NameChanging(string value);
    partial void OnPet_NameChanged();
    partial void OnAnimal_TypeChanging(System.Nullable<int> value);
    partial void OnAnimal_TypeChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    partial void OnCostChanging(System.Nullable<double> value);
    partial void OnCostChanged();
    partial void OnRoom_NumberChanging(System.Nullable<int> value);
    partial void OnRoom_NumberChanged();
    partial void OnAdoption_StatusChanging(System.Nullable<bool> value);
    partial void OnAdoption_StatusChanged();
    partial void OnShot_StatusChanging(System.Nullable<bool> value);
    partial void OnShot_StatusChanged();
    partial void OnFood_ConsumptionChanging(System.Nullable<int> value);
    partial void OnFood_ConsumptionChanged();
    #endregion
		
		public Animal()
		{
			this._Age1 = default(EntityRef<Age>);
			this._Animal_Type1 = default(EntityRef<Animal_Type>);
			this._Food_Amount = default(EntityRef<Food_Amount>);
			this._Room_Number1 = default(EntityRef<Room_Number>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_Name", DbType="VarChar(50)")]
		public string Pet_Name
		{
			get
			{
				return this._Pet_Name;
			}
			set
			{
				if ((this._Pet_Name != value))
				{
					this.OnPet_NameChanging(value);
					this.SendPropertyChanging();
					this._Pet_Name = value;
					this.SendPropertyChanged("Pet_Name");
					this.OnPet_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Animal_Type", DbType="Int")]
		public System.Nullable<int> Animal_Type
		{
			get
			{
				return this._Animal_Type;
			}
			set
			{
				if ((this._Animal_Type != value))
				{
					if (this._Animal_Type1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnimal_TypeChanging(value);
					this.SendPropertyChanging();
					this._Animal_Type = value;
					this.SendPropertyChanged("Animal_Type");
					this.OnAnimal_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int")]
		public System.Nullable<int> Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					if (this._Age1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Float")]
		public System.Nullable<double> Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room_Number", DbType="Int")]
		public System.Nullable<int> Room_Number
		{
			get
			{
				return this._Room_Number;
			}
			set
			{
				if ((this._Room_Number != value))
				{
					if (this._Room_Number1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoom_NumberChanging(value);
					this.SendPropertyChanging();
					this._Room_Number = value;
					this.SendPropertyChanged("Room_Number");
					this.OnRoom_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adoption_Status", DbType="Bit")]
		public System.Nullable<bool> Adoption_Status
		{
			get
			{
				return this._Adoption_Status;
			}
			set
			{
				if ((this._Adoption_Status != value))
				{
					this.OnAdoption_StatusChanging(value);
					this.SendPropertyChanging();
					this._Adoption_Status = value;
					this.SendPropertyChanged("Adoption_Status");
					this.OnAdoption_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shot_Status", DbType="Bit")]
		public System.Nullable<bool> Shot_Status
		{
			get
			{
				return this._Shot_Status;
			}
			set
			{
				if ((this._Shot_Status != value))
				{
					this.OnShot_StatusChanging(value);
					this.SendPropertyChanging();
					this._Shot_Status = value;
					this.SendPropertyChanged("Shot_Status");
					this.OnShot_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Food_Consumption", DbType="Int")]
		public System.Nullable<int> Food_Consumption
		{
			get
			{
				return this._Food_Consumption;
			}
			set
			{
				if ((this._Food_Consumption != value))
				{
					if (this._Food_Amount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFood_ConsumptionChanging(value);
					this.SendPropertyChanging();
					this._Food_Consumption = value;
					this.SendPropertyChanged("Food_Consumption");
					this.OnFood_ConsumptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Age_Animal", Storage="_Age1", ThisKey="Age", OtherKey="ID", IsForeignKey=true)]
		public Age Age1
		{
			get
			{
				return this._Age1.Entity;
			}
			set
			{
				Age previousValue = this._Age1.Entity;
				if (((previousValue != value) 
							|| (this._Age1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Age1.Entity = null;
						previousValue.Animals.Remove(this);
					}
					this._Age1.Entity = value;
					if ((value != null))
					{
						value.Animals.Add(this);
						this._Age = value.ID;
					}
					else
					{
						this._Age = default(Nullable<int>);
					}
					this.SendPropertyChanged("Age1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animal_Type_Animal", Storage="_Animal_Type1", ThisKey="Animal_Type", OtherKey="ID", IsForeignKey=true)]
		public Animal_Type Animal_Type1
		{
			get
			{
				return this._Animal_Type1.Entity;
			}
			set
			{
				Animal_Type previousValue = this._Animal_Type1.Entity;
				if (((previousValue != value) 
							|| (this._Animal_Type1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal_Type1.Entity = null;
						previousValue.Animals.Remove(this);
					}
					this._Animal_Type1.Entity = value;
					if ((value != null))
					{
						value.Animals.Add(this);
						this._Animal_Type = value.ID;
					}
					else
					{
						this._Animal_Type = default(Nullable<int>);
					}
					this.SendPropertyChanged("Animal_Type1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_Amount_Animal", Storage="_Food_Amount", ThisKey="Food_Consumption", OtherKey="ID", IsForeignKey=true)]
		public Food_Amount Food_Amount
		{
			get
			{
				return this._Food_Amount.Entity;
			}
			set
			{
				Food_Amount previousValue = this._Food_Amount.Entity;
				if (((previousValue != value) 
							|| (this._Food_Amount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Food_Amount.Entity = null;
						previousValue.Animals.Remove(this);
					}
					this._Food_Amount.Entity = value;
					if ((value != null))
					{
						value.Animals.Add(this);
						this._Food_Consumption = value.ID;
					}
					else
					{
						this._Food_Consumption = default(Nullable<int>);
					}
					this.SendPropertyChanged("Food_Amount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Number_Animal", Storage="_Room_Number1", ThisKey="Room_Number", OtherKey="ID", IsForeignKey=true)]
		public Room_Number Room_Number1
		{
			get
			{
				return this._Room_Number1.Entity;
			}
			set
			{
				Room_Number previousValue = this._Room_Number1.Entity;
				if (((previousValue != value) 
							|| (this._Room_Number1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room_Number1.Entity = null;
						previousValue.Animals.Remove(this);
					}
					this._Room_Number1.Entity = value;
					if ((value != null))
					{
						value.Animals.Add(this);
						this._Room_Number = value.ID;
					}
					else
					{
						this._Room_Number = default(Nullable<int>);
					}
					this.SendPropertyChanged("Room_Number1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Animal_Type")]
	public partial class Animal_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Species;
		
		private EntitySet<Animal> _Animals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSpeciesChanging(string value);
    partial void OnSpeciesChanged();
    #endregion
		
		public Animal_Type()
		{
			this._Animals = new EntitySet<Animal>(new Action<Animal>(this.attach_Animals), new Action<Animal>(this.detach_Animals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Species", DbType="VarChar(50)")]
		public string Species
		{
			get
			{
				return this._Species;
			}
			set
			{
				if ((this._Species != value))
				{
					this.OnSpeciesChanging(value);
					this.SendPropertyChanging();
					this._Species = value;
					this.SendPropertyChanged("Species");
					this.OnSpeciesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animal_Type_Animal", Storage="_Animals", ThisKey="ID", OtherKey="Animal_Type")]
		public EntitySet<Animal> Animals
		{
			get
			{
				return this._Animals;
			}
			set
			{
				this._Animals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Animal_Type1 = this;
		}
		
		private void detach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Animal_Type1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Food_Amount")]
	public partial class Food_Amount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<double> _Lbs_Of_Food_Weekly;
		
		private EntitySet<Animal> _Animals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLbs_Of_Food_WeeklyChanging(System.Nullable<double> value);
    partial void OnLbs_Of_Food_WeeklyChanged();
    #endregion
		
		public Food_Amount()
		{
			this._Animals = new EntitySet<Animal>(new Action<Animal>(this.attach_Animals), new Action<Animal>(this.detach_Animals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lbs_Of_Food_Weekly", DbType="Float")]
		public System.Nullable<double> Lbs_Of_Food_Weekly
		{
			get
			{
				return this._Lbs_Of_Food_Weekly;
			}
			set
			{
				if ((this._Lbs_Of_Food_Weekly != value))
				{
					this.OnLbs_Of_Food_WeeklyChanging(value);
					this.SendPropertyChanging();
					this._Lbs_Of_Food_Weekly = value;
					this.SendPropertyChanged("Lbs_Of_Food_Weekly");
					this.OnLbs_Of_Food_WeeklyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_Amount_Animal", Storage="_Animals", ThisKey="ID", OtherKey="Food_Consumption")]
		public EntitySet<Animal> Animals
		{
			get
			{
				return this._Animals;
			}
			set
			{
				this._Animals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Food_Amount = this;
		}
		
		private void detach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Food_Amount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room_Number")]
	public partial class Room_Number : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Room;
		
		private EntitySet<Animal> _Animals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRoomChanging(System.Nullable<int> value);
    partial void OnRoomChanged();
    #endregion
		
		public Room_Number()
		{
			this._Animals = new EntitySet<Animal>(new Action<Animal>(this.attach_Animals), new Action<Animal>(this.detach_Animals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room", DbType="Int")]
		public System.Nullable<int> Room
		{
			get
			{
				return this._Room;
			}
			set
			{
				if ((this._Room != value))
				{
					this.OnRoomChanging(value);
					this.SendPropertyChanging();
					this._Room = value;
					this.SendPropertyChanged("Room");
					this.OnRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Number_Animal", Storage="_Animals", ThisKey="ID", OtherKey="Room_Number")]
		public EntitySet<Animal> Animals
		{
			get
			{
				return this._Animals;
			}
			set
			{
				this._Animals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Room_Number1 = this;
		}
		
		private void detach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Room_Number1 = null;
		}
	}
}
#pragma warning restore 1591
